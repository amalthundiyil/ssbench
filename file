package main

import (
	"context"
	"fmt"
	"time"

	"github.com/amalthundiyil/ssbench/pkg/framework"
	"github.com/containerd/containerd"
	"github.com/containerd/containerd/cio"
	ctdsnapshotters "github.com/containerd/containerd/pkg/snapshotters"
)

func main() {
	ctx := context.TODO()
	// imageRef := "registry.hub.docker.com/library/python:3.9"
	// command := "python3 -c \"print('Hello World')\""
	imageRef := "registry.hub.docker.com/library/gcc:10.2.0"
	// command := "echo '#include <stdio.h>\nint main() { printf(\"Hello World\\n\"); return 0; }' > /tmp/main.c && gcc -o /tmp/a.out /tmp/main.c && /tmp/a.out"
	client, err := containerd.New("/run/containerd/containerd.sock", containerd.WithDefaultNamespace("default"))
	if err != nil {
		panic(err)
	}
	defer client.Close()

	for i := 0; i < 5; i++ {
		// pull
		image, err := client.Pull(ctx, imageRef, []containerd.RemoteOpt{
			containerd.WithResolver(framework.GetResolver(ctx, imageRef)),
			containerd.WithPullUnpack,
			// containerd.WithPullSnapshotter("cvmfs-snapshotter"),
			containerd.WithImageHandlerWrapper(ctdsnapshotters.AppendInfoHandlerWrapper(imageRef)),
		}...)
		if err != nil {
			panic(err)
		}
		fmt.Println(image)

		// create
		container, err := client.NewContainer(ctx, fmt.Sprintf("%d", time.Now().UnixNano()))
		// container, err := client.NewContainer(ctx, fmt.Sprintf("%d", time.Now().UnixNano()), containerd.WithSnapshotter("cvmfs-snapshotter"))
		if err != nil {
			panic(err)
		}
		cleanupFunc := func() {
			err = container.Delete(ctx, containerd.WithSnapshotCleanup)
			if err != nil {
				fmt.Printf("Error deleting container: %v\n", err)
			}
		}
		defer cleanupFunc()

		// execute
		task, err := container.NewTask(ctx, cio.NewCreator(cio.WithStdio))
		if err != nil {
			panic(err)
		}
		defer task.Delete(ctx)
		// 	stdoutPipeReader, stdoutPipeWriter := io.Pipe()
		// 	stderrPipeReader, stderrPipeWriter := io.Pipe()
		// 	cioCreator := cio.BinaryIO("/usr/bin/sh", map[string]string{"-c": command})
		// 	task, err := container.NewTask(ctx, cioCreator)
		// 	if err != nil {
		// 		panic(err)
		// 	}
		// 	cleanTask := func() {
		// 		stdoutPipeReader.Close()
		// 		stdoutPipeWriter.Close()
		// 		stderrPipeReader.Close()
		// 		stderrPipeWriter.Close()
		// 		processStatus, _ := task.Status(ctx)
		// 		if processStatus.Status != "stopped" {
		// 			fmt.Printf("Tried to kill task")
		// 			if err != nil {
		// 				fmt.Printf("Error killing task: %v\n", err)
		// 			}
		// 		}
		// 		_, err = task.Delete(ctx)
		// 		if err != nil {
		// 			fmt.Printf("Error deleting task: %v\n", err)
		// 		}
		// 	}
		// 	defer cleanTask()
		// 	cleanupRun, err := RunContainerTaskForReadyLine(ctx, task, "Hello World", stdoutPipeReader, stderrPipeReader)
		// 	if err != nil {
		// 		panic(err)
		// 	}
		// 	cleanupRun()
	}
}

// func RunContainerTaskForReadyLine(
// 	ctx context.Context,
// 	task containerd.Task,
// 	readyLine string,
// 	stdoutPipeReader *io.PipeReader,
// 	stderrPipeReader *io.PipeReader,
// ) (func(), error) {
// 	stdoutScanner := bufio.NewScanner(stdoutPipeReader)
// 	stderrScanner := bufio.NewScanner(stderrPipeReader)

// 	exitStatusC, err := task.Wait(ctx)
// 	if err != nil {
// 		return nil, err
// 	}
// 	resultChannel := make(chan string, 1)
// 	timeoutCtx, cancel := context.WithTimeout(context.Background(), 180*time.Second)
// 	defer cancel()
// 	go func() {
// 		select {
// 		case <-exitStatusC:
// 			resultChannel <- "PROC_EXIT"
// 		case <-timeoutCtx.Done():
// 			return
// 		}
// 	}()

// 	go func() {
// 		for stderrScanner.Scan() {
// 			nextLine := stderrScanner.Text()
// 			if strings.Contains(nextLine, readyLine) {
// 				resultChannel <- "READYLINE_STDERR"
// 				return
// 			}
// 			select {
// 			case <-timeoutCtx.Done():
// 				return
// 			default:
// 			}
// 		}
// 	}()

// 	go func() {
// 		for stdoutScanner.Scan() {
// 			nextLine := stdoutScanner.Text()
// 			if strings.Contains(nextLine, readyLine) {
// 				resultChannel <- "READYLINE_STDOUT"
// 				return
// 			}
// 			select {
// 			case <-timeoutCtx.Done():
// 				return
// 			default:
// 			}
// 		}
// 	}()

// 	if err := task.Start(ctx); err != nil {
// 		return nil, err
// 	}

// 	select {
// 	case <-resultChannel:
// 		break
// 	case <-timeoutCtx.Done():
// 		break
// 	}

// 	cleanupFunc := func() {
// 		processStatus, _ := task.Status(ctx)
// 		if processStatus.Status == "running" {
// 			err = task.Kill(ctx, syscall.SIGKILL)
// 			if err != nil {
// 				fmt.Printf("Error killing task: %v\n", err)
// 			}
// 			exitChannel, _ := task.Wait(ctx)
// 			<-exitChannel
// 		}
// 	}
// 	return cleanupFunc, nil
// }
